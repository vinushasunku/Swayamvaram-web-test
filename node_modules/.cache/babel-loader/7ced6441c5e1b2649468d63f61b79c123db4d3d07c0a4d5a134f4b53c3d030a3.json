{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport CasteService from '../../services/CasteService';\nexport const initialState = {\n  religionStatus: 'idle',\n  religionError: '',\n  casteData: createCaste(),\n  religionData: createReligionData(),\n  casteList: createCasteList(),\n  subCasteList: createSubCasteList(),\n  currentRequestId: undefined\n};\nexport function createCaste() {\n  return {\n    religion: '',\n    caste: '',\n    subCaste: ''\n  };\n}\nexport function createCasteList() {\n  return [{\n    id: '',\n    name: '',\n    hasNextLevel: '',\n    nextLevelName: ''\n  }];\n}\nexport function createSubCasteList() {\n  return [{\n    id: '',\n    name: '',\n    hasNextLevel: '',\n    nextLevelName: ''\n  }];\n}\nexport function createReligionData() {\n  return [{\n    id: '',\n    name: '',\n    hasNextLevel: '',\n    nextLevelName: ''\n  }];\n}\nexport const fetchReligionlists = createAsyncThunk('matrimony/getReligion', async () => {\n  var _res$data, _res$data2;\n  const res = await CasteService.getReligion();\n  console.log('getreligion', res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.values);\n  return res ? res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.values : undefined;\n});\nexport const fetchCastelists = createAsyncThunk('/matrimony/religion/', async regionName => {\n  var _res$data3;\n  const res = await CasteService.getcaste(regionName);\n  return res ? res === null || res === void 0 ? void 0 : (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : _res$data3.values : undefined;\n});\nexport const fetchSubCastelists = createAsyncThunk('/matrimony/Subreligion/', async religion => {\n  var _res$data4;\n  const res = await CasteService.getSubcaste(religion.religion, religion.caste);\n  return res ? res === null || res === void 0 ? void 0 : (_res$data4 = res.data) === null || _res$data4 === void 0 ? void 0 : _res$data4.values : undefined;\n});\nexport const casteSlice = createSlice({\n  name: \"Caste\",\n  initialState,\n  reducers: {\n    setCasteData: (state, action) => {\n      state.casteData = action.payload;\n    },\n    resetQuery: () => {\n      return initialState;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchReligionlists.fulfilled, (state, action) => {\n      const {\n        requestId\n      } = action.meta;\n      if (state.religionStatus === 'pending' && state.currentRequestId === requestId) {\n        state.religionStatus = 'idle';\n        state.religionData.push(action.payload);\n        state.currentRequestId = undefined;\n      }\n    }).addCase(fetchReligionlists.pending, (state, action) => {\n      if (state.religionStatus === 'idle') {\n        state.religionStatus = 'pending';\n        state.religionError = '';\n      }\n    }).addCase(fetchReligionlists.rejected, (state, action) => {\n      const {\n        requestId\n      } = action.meta;\n      if (state.religionStatus === 'pending' && state.currentRequestId === requestId) {\n        state.religionStatus = 'idle';\n        state.religionError = \"Unable to retrive data\";\n        state.currentRequestId = undefined;\n      }\n    }).addCase(fetchCastelists.fulfilled, (state, action) => {\n      const {\n        requestId\n      } = action.meta;\n      if (state.religionStatus === 'pending' && state.currentRequestId === requestId) {\n        state.religionStatus = 'idle';\n        state.casteList.push(action.payload);\n        state.currentRequestId = undefined;\n      }\n    }).addCase(fetchCastelists.pending, (state, action) => {\n      if (state.religionStatus === 'idle') {\n        state.religionStatus = 'pending';\n        state.religionError = '';\n      }\n    }).addCase(fetchCastelists.rejected, (state, action) => {\n      const {\n        requestId\n      } = action.meta;\n      if (state.religionStatus === 'pending' && state.currentRequestId === requestId) {\n        state.religionStatus = 'idle';\n        state.religionError = \"Unable to retrive data\";\n        state.currentRequestId = undefined;\n      }\n    }).addCase(fetchSubCastelists.fulfilled, (state, action) => {\n      const {\n        requestId\n      } = action.meta;\n      if (state.religionStatus === 'pending' && state.currentRequestId === requestId) {\n        state.religionStatus = 'idle';\n        state.subCasteList.push(action.payload);\n        state.currentRequestId = undefined;\n      }\n    }).addCase(fetchSubCastelists.pending, (state, action) => {\n      if (state.religionStatus === 'idle') {\n        state.religionStatus = 'pending';\n        state.religionError = '';\n      }\n    }).addCase(fetchSubCastelists.rejected, (state, action) => {\n      const {\n        requestId\n      } = action.meta;\n      if (state.religionStatus === 'pending' && state.currentRequestId === requestId) {\n        state.religionStatus = 'idle';\n        state.religionError = \"Unable to retrive data\";\n        state.currentRequestId = undefined;\n      }\n    });\n  }\n});\nexport const {\n  setCasteData\n} = casteSlice.actions;\nexport const getCaste = state => state.casteData;\nexport const getReligion = state => state.religionData;\nexport const getCasteList = state => state.casteList;\nexport const getSubCasteList = state => state.subCasteList;\nexport default casteSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","CasteService","initialState","religionStatus","religionError","casteData","createCaste","religionData","createReligionData","casteList","createCasteList","subCasteList","createSubCasteList","currentRequestId","undefined","religion","caste","subCaste","id","name","hasNextLevel","nextLevelName","fetchReligionlists","_res$data","_res$data2","res","getReligion","console","log","data","values","fetchCastelists","regionName","_res$data3","getcaste","fetchSubCastelists","_res$data4","getSubcaste","casteSlice","reducers","setCasteData","state","action","payload","resetQuery","extraReducers","builder","addCase","fulfilled","requestId","meta","push","pending","rejected","actions","getCaste","getCasteList","getSubCasteList","reducer"],"sources":["/Users/vinusha/Desktop/Vinusha/test/Swayamvaram-web/src/redux/slices/caste.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport CasteService, { CasteInfoDto, ReligionDataDto } from '../../services/CasteService'\n\nexport const initialState={\n    religionStatus:'idle',\n    religionError:'',\n    casteData:createCaste(),\n    religionData:createReligionData(),\n    casteList:createCasteList(),\n    subCasteList:createSubCasteList(),\n    currentRequestId: undefined,\n}\nexport function createCaste(): CasteInfoDto{\n    return{\n        religion:'',\n        caste:'',\n        subCaste:''\n    };\n\n}\nexport function createCasteList(): [ReligionDataDto]{\n  return[\n    {\n      id:'',\n      name:'',\n      hasNextLevel:'',\n      nextLevelName:''\n  }\n  ]\n\n}\nexport function createSubCasteList(): [ReligionDataDto]{\n  return[\n    {\n      id:'',\n      name:'',\n      hasNextLevel:'',\n      nextLevelName:''\n  }\n  ]\n\n}\nexport function createReligionData(): [ReligionDataDto]{\n  return[\n    {\n      id:'',\n      name:'',\n      hasNextLevel:'',\n      nextLevelName:''\n    },\n  ]\n\n}\n\nexport const fetchReligionlists=createAsyncThunk(\n  'matrimony/getReligion',\n  async () =>{\n    const res= await CasteService.getReligion();\n    console.log('getreligion',res?.data?.values)\n    return res? res?.data?.values :undefined\n  }\n);\nexport const fetchCastelists=createAsyncThunk(\n  '/matrimony/religion/',\n  async (regionName:string) =>{\n    const res= await CasteService.getcaste(regionName);\n    return res? res?.data?.values :undefined\n  }\n);\nexport const fetchSubCastelists=createAsyncThunk(\n  '/matrimony/Subreligion/',\n  async (religion:CasteInfoDto) =>{\n    const res= await CasteService.getSubcaste(religion.religion,religion.caste);\n    return res? res?.data?.values :undefined\n  }\n);\nexport const casteSlice = createSlice({\n    name: \"Caste\",\n    initialState,\n    reducers: {\n      setCasteData:(state, action: PayloadAction<CasteInfoDto>)=> {\n        state.casteData=action.payload        \n      },\n      resetQuery:()=>{\n        return initialState\n      },\n    },\n    extraReducers: builder => {\n      builder.addCase(fetchReligionlists.fulfilled, (state, action) => {\n        const { requestId } = action.meta\n        if (\n          state.religionStatus === 'pending' &&\n          state.currentRequestId === requestId\n        ) {\n          state.religionStatus = 'idle'\n          state.religionData.push(action.payload)\n          state.currentRequestId = undefined\n        }\n      })\n      .addCase(fetchReligionlists.pending, (state, action) => {\n        if (state.religionStatus === 'idle') {\n            state.religionStatus = 'pending'\n            state.religionError='';\n          }\n      })\n      .addCase(fetchReligionlists.rejected, (state, action) => {\n        const { requestId } = action.meta\n        if (\n          state.religionStatus === 'pending' &&\n          state.currentRequestId === requestId\n        ) {\n          state.religionStatus = 'idle'\n          state.religionError = \"Unable to retrive data\"\n          state.currentRequestId = undefined\n        }\n      })\n      .addCase(fetchCastelists.fulfilled, (state, action) => {\n        const { requestId } = action.meta\n        if (\n          state.religionStatus === 'pending' &&\n          state.currentRequestId === requestId\n        ) {\n          state.religionStatus = 'idle'\n          state.casteList.push(action.payload)\n          state.currentRequestId = undefined\n        }\n      })\n      .addCase(fetchCastelists.pending, (state, action) => {\n        if (state.religionStatus === 'idle') {\n            state.religionStatus = 'pending'\n            state.religionError='';\n          }\n      })\n      .addCase(fetchCastelists.rejected, (state, action) => {\n        const { requestId } = action.meta\n        if (\n          state.religionStatus === 'pending' &&\n          state.currentRequestId === requestId\n        ) {\n          state.religionStatus = 'idle'\n          state.religionError = \"Unable to retrive data\"\n          state.currentRequestId = undefined\n        }\n      })\n      .addCase(fetchSubCastelists.fulfilled, (state, action) => {\n        const { requestId } = action.meta\n        if (\n          state.religionStatus === 'pending' &&\n          state.currentRequestId === requestId\n        ) {\n          state.religionStatus = 'idle'\n          state.subCasteList.push(action.payload)\n          state.currentRequestId = undefined\n        }\n      })\n      .addCase(fetchSubCastelists.pending, (state, action) => {\n        if (state.religionStatus === 'idle') {\n            state.religionStatus = 'pending'\n            state.religionError='';\n          }\n      })\n      .addCase(fetchSubCastelists.rejected, (state, action) => {\n        const { requestId } = action.meta\n        if (\n          state.religionStatus === 'pending' &&\n          state.currentRequestId === requestId\n        ) {\n          state.religionStatus = 'idle'\n          state.religionError = \"Unable to retrive data\"\n          state.currentRequestId = undefined\n        }\n      })\n    }\n  \n  })\n  \n  export const { setCasteData} = casteSlice.actions\n  export  const getCaste=(state:any)=>state.casteData;\n  export  const getReligion=(state:any)=>state.religionData;\n  export  const getCasteList=(state:any)=>state.casteList;\n  export  const getSubCasteList=(state:any)=>state.subCasteList;\n  export default casteSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}