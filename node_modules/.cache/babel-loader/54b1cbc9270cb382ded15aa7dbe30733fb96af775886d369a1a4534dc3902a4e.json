{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport CasteService from '../../services/CasteService';\nexport const initialState = {\n  religionStatus: 'idle',\n  religionError: '',\n  casteData: createCaste(),\n  religionData: createReligionData(),\n  casteList: createCasteList(),\n  subCasteList: createSubCasteList()\n};\nexport function createCaste() {\n  return {\n    religion: '',\n    caste: '',\n    subCaste: ''\n  };\n}\nexport function createCasteList() {\n  return [{\n    id: '',\n    name: '',\n    hasNextLevel: '',\n    nextLevelName: ''\n  }];\n}\nexport function createSubCasteList() {\n  return [{\n    id: '',\n    name: '',\n    hasNextLevel: '',\n    nextLevelName: ''\n  }];\n}\nexport function createReligionData() {\n  return [{\n    id: '',\n    name: '',\n    hasNextLevel: '',\n    nextLevelName: ''\n  }];\n}\nexport const fetchReligionlists = createAsyncThunk('matrimony/getReligion', async () => {\n  var _res$data, _res$data2;\n  const res = await CasteService.getReligion();\n  console.log('getreligion', res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.values);\n  return res ? res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.values : undefined;\n});\nexport const fetchCastelists = createAsyncThunk('/matrimony/religion/', async regionName => {\n  var _res$data3;\n  const res = await CasteService.getcaste(regionName);\n  return res ? res === null || res === void 0 ? void 0 : (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : _res$data3.values : undefined;\n});\nexport const fetchSubCastelists = createAsyncThunk('/matrimony/Subreligion/', async religion => {\n  var _res$data4;\n  const res = await CasteService.getSubcaste(religion.religion, religion.caste);\n  return res ? res === null || res === void 0 ? void 0 : (_res$data4 = res.data) === null || _res$data4 === void 0 ? void 0 : _res$data4.values : undefined;\n});\nexport const casteSlice = createSlice({\n  name: \"Caste\",\n  initialState,\n  reducers: {\n    setCasteData: (state, action) => {\n      state.casteData = action.payload;\n    },\n    resetQuery: () => {\n      return initialState;\n    }\n  },\n  extraReducers: builder => {\n    // Add reducers for additional action types here, and handle loading state as needed\n    builder.addCase(fetchReligionlists.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.religionStatus = \"succeeded\";\n      state.religionError = '';\n      if (action.payload) {\n        state.religionData.push(action.payload);\n      }\n    }), builder.addCase(fetchReligionlists.pending, state => {\n      state.religionStatus = 'loading', state.religionError = '';\n    });\n    // builder.addCase(fetchReligionlists.rejected, (state, action) => {\n    //   // Add user to the state array\n    //     state.religionStatus='failed',\n    //     state.religionError='Unable to get list';\n\n    // })\n  }\n  // extraReducers: (builder) => {\n  //   // builder.addCase(fetchReligionlists.fulfilled, (state, action) => {\n  //   //  //state.religionStatus=\"succeeded\",\n  //   //   //state.religionError='';\n  //   //   // if(action.payload){\n  //   //     state.religionData.push(action.payload)\n  //   //   // }\n  //   // }),\n  //   builder.addCase(fetchReligionlists.pending, state => {\n  //     //state.religionStatus='loading',\n  //     state.religionError='';\n  //   }),\n  //   builder.addCase(fetchReligionlists.rejected, (state, action) => {\n  //     //state.religionStatus='failed',\n  //     state.religionError='Unable to get list';\n  //   }),\n  //   builder.addCase(fetchCastelists.fulfilled, (state, action) => {\n  //     //state.religionStatus='succeeded',\n  //     state.religionError='';\n  //     if(action.payload){\n  //       state.casteList=action.payload\n  //     }\n  //   }),\n  //   builder.addCase(fetchCastelists.pending, (state, action) => {\n  //     //state.religionStatus='loading',\n  //     state.religionError='';\n  //   }),\n  //   builder.addCase(fetchCastelists.rejected, (state, action) => {\n  //     //state.religionStatus='failed',\n  //     state.religionError='Unable to get list';\n  //   }),\n  //   builder.addCase(fetchSubCastelists.fulfilled, (state, action) => {\n  //     //state.religionStatus='succeeded',\n  //     state.religionError='';\n  //     if(action.payload){\n  //       state.subCasteList=action.payload\n  //     }\n  //   }),\n  //   builder.addCase(fetchSubCastelists.pending, (state, action) => {\n  //     //state.religionStatus='loading',\n  //     state.religionError='';\n  //   }),\n  //   builder.addCase(fetchSubCastelists.rejected, (state, action) => {\n  //     //state.religionStatus='failed',\n  //     state.religionError='Unable to get list';\n  //   })\n  // }\n});\n\nexport const {\n  setCasteData\n} = casteSlice.actions;\nexport const getCaste = state => state.casteData;\nexport const getReligion = state => state.religionData;\nexport const getCasteList = state => state.casteList;\nexport const getSubCasteList = state => state.subCasteList;\nexport const getCasteData = state => {\n  return [{\n    id: 0,\n    title: 'Religion',\n    databind: 'religion',\n    textIcon: true,\n    icon: 'chevron-forward-outline',\n    action: ''\n  }, {\n    id: 1,\n    title: 'Caste',\n    databind: 'caste',\n    textIcon: true,\n    icon: 'chevron-forward-outline',\n    action: ''\n  }, {\n    id: 2,\n    title: 'Sub Caste',\n    databind: 'subcaste',\n    textIcon: true,\n    icon: 'chevron-forward-outline',\n    action: ''\n  }];\n};\nexport default casteSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","CasteService","initialState","religionStatus","religionError","casteData","createCaste","religionData","createReligionData","casteList","createCasteList","subCasteList","createSubCasteList","religion","caste","subCaste","id","name","hasNextLevel","nextLevelName","fetchReligionlists","_res$data","_res$data2","res","getReligion","console","log","data","values","undefined","fetchCastelists","regionName","_res$data3","getcaste","fetchSubCastelists","_res$data4","getSubcaste","casteSlice","reducers","setCasteData","state","action","payload","resetQuery","extraReducers","builder","addCase","fulfilled","push","pending","actions","getCaste","getCasteList","getSubCasteList","getCasteData","title","databind","textIcon","icon","reducer"],"sources":["/Users/vinusha/Desktop/Vinusha/test/Swayamvaram-web/src/redux/slices/caste.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport CasteService, { CasteInfoDto, ReligionDataDto } from '../../services/CasteService'\n\nexport const initialState={\n    religionStatus:'idle',\n    religionError:'',\n    casteData:createCaste(),\n    religionData:createReligionData(),\n    casteList:createCasteList(),\n    subCasteList:createSubCasteList()\n}\nexport function createCaste(): CasteInfoDto{\n    return{\n        religion:'',\n        caste:'',\n        subCaste:''\n    };\n\n}\nexport function createCasteList(): [ReligionDataDto]{\n  return[\n    {\n      id:'',\n      name:'',\n      hasNextLevel:'',\n      nextLevelName:''\n  }\n  ]\n\n}\nexport function createSubCasteList(): [ReligionDataDto]{\n  return[\n    {\n      id:'',\n      name:'',\n      hasNextLevel:'',\n      nextLevelName:''\n  }\n  ]\n\n}\nexport function createReligionData(): [ReligionDataDto]{\n  return[\n    {\n      id:'',\n      name:'',\n      hasNextLevel:'',\n      nextLevelName:''\n    },\n  ]\n\n}\n\nexport const fetchReligionlists=createAsyncThunk(\n  'matrimony/getReligion',\n  async () =>{\n    const res= await CasteService.getReligion();\n    console.log('getreligion',res?.data?.values)\n    return res? res?.data?.values :undefined\n  }\n);\nexport const fetchCastelists=createAsyncThunk(\n  '/matrimony/religion/',\n  async (regionName:string) =>{\n    const res= await CasteService.getcaste(regionName);\n    return res? res?.data?.values :undefined\n  }\n);\nexport const fetchSubCastelists=createAsyncThunk(\n  '/matrimony/Subreligion/',\n  async (religion:CasteInfoDto) =>{\n    const res= await CasteService.getSubcaste(religion.religion,religion.caste);\n    return res? res?.data?.values :undefined\n  }\n);\nexport const casteSlice = createSlice({\n    name: \"Caste\",\n    initialState,\n    reducers: {\n      setCasteData:(state, action: PayloadAction<CasteInfoDto>)=> {\n        state.casteData=action.payload        \n      },\n      resetQuery:()=>{\n        return initialState\n      },\n    },\n    extraReducers: (builder) => {\n      // Add reducers for additional action types here, and handle loading state as needed\n      builder.addCase(fetchReligionlists.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.religionStatus=\"succeeded\"\n        state.religionError=''\n        if(action.payload){\n        state.religionData.push(action.payload)\n        }\n      }),\n      builder.addCase(fetchReligionlists.pending, (state) => {\n       state.religionStatus='loading',\n        state.religionError='';\n      })\n      // builder.addCase(fetchReligionlists.rejected, (state, action) => {\n      //   // Add user to the state array\n      //     state.religionStatus='failed',\n      //     state.religionError='Unable to get list';\n        \n      // })\n    },\n    // extraReducers: (builder) => {\n    //   // builder.addCase(fetchReligionlists.fulfilled, (state, action) => {\n    //   //  //state.religionStatus=\"succeeded\",\n    //   //   //state.religionError='';\n    //   //   // if(action.payload){\n    //   //     state.religionData.push(action.payload)\n    //   //   // }\n    //   // }),\n    //   builder.addCase(fetchReligionlists.pending, state => {\n    //     //state.religionStatus='loading',\n    //     state.religionError='';\n    //   }),\n    //   builder.addCase(fetchReligionlists.rejected, (state, action) => {\n    //     //state.religionStatus='failed',\n    //     state.religionError='Unable to get list';\n    //   }),\n    //   builder.addCase(fetchCastelists.fulfilled, (state, action) => {\n    //     //state.religionStatus='succeeded',\n    //     state.religionError='';\n    //     if(action.payload){\n    //       state.casteList=action.payload\n    //     }\n    //   }),\n    //   builder.addCase(fetchCastelists.pending, (state, action) => {\n    //     //state.religionStatus='loading',\n    //     state.religionError='';\n    //   }),\n    //   builder.addCase(fetchCastelists.rejected, (state, action) => {\n    //     //state.religionStatus='failed',\n    //     state.religionError='Unable to get list';\n    //   }),\n    //   builder.addCase(fetchSubCastelists.fulfilled, (state, action) => {\n    //     //state.religionStatus='succeeded',\n    //     state.religionError='';\n    //     if(action.payload){\n    //       state.subCasteList=action.payload\n    //     }\n    //   }),\n    //   builder.addCase(fetchSubCastelists.pending, (state, action) => {\n    //     //state.religionStatus='loading',\n    //     state.religionError='';\n    //   }),\n    //   builder.addCase(fetchSubCastelists.rejected, (state, action) => {\n    //     //state.religionStatus='failed',\n    //     state.religionError='Unable to get list';\n    //   })\n    // }\n  \n  })\n  \n  export const { setCasteData} = casteSlice.actions\n  export  const getCaste=(state:any)=>state.casteData;\n  export  const getReligion=(state:any)=>state.religionData;\n  export  const getCasteList=(state:any)=>state.casteList;\n  export  const getSubCasteList=(state:any)=>state.subCasteList;\n  export const getCasteData=(state:any)=>{\n    return [\n      {\n        id:0,\n        title:'Religion',\n        databind:'religion',\n        textIcon:true,\n        icon:'chevron-forward-outline',\n        action:''\n      },\n      {\n        id:1,\n        title:'Caste',\n        databind:'caste',\n        textIcon:true,\n        icon:'chevron-forward-outline',\n        action:''\n      },\n      {\n        id:2,\n        title:'Sub Caste',\n        databind:'subcaste',\n        textIcon:true,\n        icon:'chevron-forward-outline',\n        action:''\n      }\n    ]\n  }\n\n  export default casteSlice.reducer"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAuB,kBAAkB;AAC/E,OAAOC,YAAY,MAAyC,6BAA6B;AAEzF,OAAO,MAAMC,YAAY,GAAC;EACtBC,cAAc,EAAC,MAAM;EACrBC,aAAa,EAAC,EAAE;EAChBC,SAAS,EAACC,WAAW,CAAC,CAAC;EACvBC,YAAY,EAACC,kBAAkB,CAAC,CAAC;EACjCC,SAAS,EAACC,eAAe,CAAC,CAAC;EAC3BC,YAAY,EAACC,kBAAkB,CAAC;AACpC,CAAC;AACD,OAAO,SAASN,WAAWA,CAAA,EAAgB;EACvC,OAAM;IACFO,QAAQ,EAAC,EAAE;IACXC,KAAK,EAAC,EAAE;IACRC,QAAQ,EAAC;EACb,CAAC;AAEL;AACA,OAAO,SAASL,eAAeA,CAAA,EAAqB;EAClD,OAAM,CACJ;IACEM,EAAE,EAAC,EAAE;IACLC,IAAI,EAAC,EAAE;IACPC,YAAY,EAAC,EAAE;IACfC,aAAa,EAAC;EAClB,CAAC,CACA;AAEH;AACA,OAAO,SAASP,kBAAkBA,CAAA,EAAqB;EACrD,OAAM,CACJ;IACEI,EAAE,EAAC,EAAE;IACLC,IAAI,EAAC,EAAE;IACPC,YAAY,EAAC,EAAE;IACfC,aAAa,EAAC;EAClB,CAAC,CACA;AAEH;AACA,OAAO,SAASX,kBAAkBA,CAAA,EAAqB;EACrD,OAAM,CACJ;IACEQ,EAAE,EAAC,EAAE;IACLC,IAAI,EAAC,EAAE;IACPC,YAAY,EAAC,EAAE;IACfC,aAAa,EAAC;EAChB,CAAC,CACF;AAEH;AAEA,OAAO,MAAMC,kBAAkB,GAACrB,gBAAgB,CAC9C,uBAAuB,EACvB,YAAW;EAAA,IAAAsB,SAAA,EAAAC,UAAA;EACT,MAAMC,GAAG,GAAE,MAAMtB,YAAY,CAACuB,WAAW,CAAC,CAAC;EAC3CC,OAAO,CAACC,GAAG,CAAC,aAAa,EAACH,GAAG,aAAHA,GAAG,wBAAAF,SAAA,GAAHE,GAAG,CAAEI,IAAI,cAAAN,SAAA,uBAATA,SAAA,CAAWO,MAAM,CAAC;EAC5C,OAAOL,GAAG,GAAEA,GAAG,aAAHA,GAAG,wBAAAD,UAAA,GAAHC,GAAG,CAAEI,IAAI,cAAAL,UAAA,uBAATA,UAAA,CAAWM,MAAM,GAAEC,SAAS;AAC1C,CACF,CAAC;AACD,OAAO,MAAMC,eAAe,GAAC/B,gBAAgB,CAC3C,sBAAsB,EACtB,MAAOgC,UAAiB,IAAI;EAAA,IAAAC,UAAA;EAC1B,MAAMT,GAAG,GAAE,MAAMtB,YAAY,CAACgC,QAAQ,CAACF,UAAU,CAAC;EAClD,OAAOR,GAAG,GAAEA,GAAG,aAAHA,GAAG,wBAAAS,UAAA,GAAHT,GAAG,CAAEI,IAAI,cAAAK,UAAA,uBAATA,UAAA,CAAWJ,MAAM,GAAEC,SAAS;AAC1C,CACF,CAAC;AACD,OAAO,MAAMK,kBAAkB,GAACnC,gBAAgB,CAC9C,yBAAyB,EACzB,MAAOc,QAAqB,IAAI;EAAA,IAAAsB,UAAA;EAC9B,MAAMZ,GAAG,GAAE,MAAMtB,YAAY,CAACmC,WAAW,CAACvB,QAAQ,CAACA,QAAQ,EAACA,QAAQ,CAACC,KAAK,CAAC;EAC3E,OAAOS,GAAG,GAAEA,GAAG,aAAHA,GAAG,wBAAAY,UAAA,GAAHZ,GAAG,CAAEI,IAAI,cAAAQ,UAAA,uBAATA,UAAA,CAAWP,MAAM,GAAEC,SAAS;AAC1C,CACF,CAAC;AACD,OAAO,MAAMQ,UAAU,GAAGrC,WAAW,CAAC;EAClCiB,IAAI,EAAE,OAAO;EACbf,YAAY;EACZoC,QAAQ,EAAE;IACRC,YAAY,EAACA,CAACC,KAAK,EAAEC,MAAmC,KAAI;MAC1DD,KAAK,CAACnC,SAAS,GAACoC,MAAM,CAACC,OAAO;IAChC,CAAC;IACDC,UAAU,EAACA,CAAA,KAAI;MACb,OAAOzC,YAAY;IACrB;EACF,CAAC;EACD0C,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAAC1B,kBAAkB,CAAC2B,SAAS,EAAE,CAACP,KAAK,EAAEC,MAAM,KAAK;MAC/D;MACAD,KAAK,CAACrC,cAAc,GAAC,WAAW;MAChCqC,KAAK,CAACpC,aAAa,GAAC,EAAE;MACtB,IAAGqC,MAAM,CAACC,OAAO,EAAC;QAClBF,KAAK,CAACjC,YAAY,CAACyC,IAAI,CAACP,MAAM,CAACC,OAAO,CAAC;MACvC;IACF,CAAC,CAAC,EACFG,OAAO,CAACC,OAAO,CAAC1B,kBAAkB,CAAC6B,OAAO,EAAGT,KAAK,IAAK;MACtDA,KAAK,CAACrC,cAAc,GAAC,SAAS,EAC7BqC,KAAK,CAACpC,aAAa,GAAC,EAAE;IACxB,CAAC,CAAC;IACF;IACA;IACA;IACA;;IAEA;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAEF,CAAC,CAAC;;AAEF,OAAO,MAAM;EAAEmC;AAAY,CAAC,GAAGF,UAAU,CAACa,OAAO;AACjD,OAAQ,MAAMC,QAAQ,GAAEX,KAAS,IAAGA,KAAK,CAACnC,SAAS;AACnD,OAAQ,MAAMmB,WAAW,GAAEgB,KAAS,IAAGA,KAAK,CAACjC,YAAY;AACzD,OAAQ,MAAM6C,YAAY,GAAEZ,KAAS,IAAGA,KAAK,CAAC/B,SAAS;AACvD,OAAQ,MAAM4C,eAAe,GAAEb,KAAS,IAAGA,KAAK,CAAC7B,YAAY;AAC7D,OAAO,MAAM2C,YAAY,GAAEd,KAAS,IAAG;EACrC,OAAO,CACL;IACExB,EAAE,EAAC,CAAC;IACJuC,KAAK,EAAC,UAAU;IAChBC,QAAQ,EAAC,UAAU;IACnBC,QAAQ,EAAC,IAAI;IACbC,IAAI,EAAC,yBAAyB;IAC9BjB,MAAM,EAAC;EACT,CAAC,EACD;IACEzB,EAAE,EAAC,CAAC;IACJuC,KAAK,EAAC,OAAO;IACbC,QAAQ,EAAC,OAAO;IAChBC,QAAQ,EAAC,IAAI;IACbC,IAAI,EAAC,yBAAyB;IAC9BjB,MAAM,EAAC;EACT,CAAC,EACD;IACEzB,EAAE,EAAC,CAAC;IACJuC,KAAK,EAAC,WAAW;IACjBC,QAAQ,EAAC,UAAU;IACnBC,QAAQ,EAAC,IAAI;IACbC,IAAI,EAAC,yBAAyB;IAC9BjB,MAAM,EAAC;EACT,CAAC,CACF;AACH,CAAC;AAED,eAAeJ,UAAU,CAACsB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}