{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport LocationService from '../../services/LocationService';\nexport const initialState = {\n  religionStatus: 'idle',\n  religionError: '',\n  locationData: createLocation(),\n  countryData: createCountryData(),\n  stateList: createStateList(),\n  cityList: createCityList()\n};\nexport function createLocation() {\n  return {\n    country: '',\n    state: '',\n    city: '',\n    citizenship: '',\n    visaStatus: '',\n    visaExpiryMonth: 0,\n    visaExpiryYear: 0\n  };\n}\nexport function createStateList() {\n  return [{\n    id: '',\n    name: '',\n    hasNextLevel: '',\n    nextLevelName: ''\n  }];\n}\nexport function createCityList() {\n  return [{\n    id: '',\n    name: '',\n    hasNextLevel: '',\n    nextLevelName: ''\n  }];\n}\nexport function createCountryData() {\n  return [{\n    id: '',\n    name: '',\n    hasNextLevel: '',\n    nextLevelName: ''\n  }];\n}\nexport const fetchCountrylists = createAsyncThunk('/matrimony/getlocation', async () => {\n  var _res$data;\n  const res = await LocationService.getCountries();\n  return res ? res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.values : undefined;\n});\nexport const fetchStatelists = createAsyncThunk('/matrimony/state/', async countryName => {\n  var _res$data2;\n  const res = await LocationService.getStates(countryName);\n  return res ? res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.values : undefined;\n});\nexport const fetchCitylists = createAsyncThunk('/matrimony/city/', async location => {\n  var _res$data3;\n  const res = await LocationService.getCities(location.country, location.state);\n  return res ? res === null || res === void 0 ? void 0 : (_res$data3 = res.data) === null || _res$data3 === void 0 ? void 0 : _res$data3.values : undefined;\n});\nexport const locationSlice = createSlice({\n  name: \"Caste\",\n  initialState,\n  reducers: {\n    resetQuery: () => {\n      return initialState;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchCountrylists.fulfilled, (state, action) => {\n      // Add user to the state array\n      state.religionStatus = \"succeeded\";\n      state.religionError = '';\n      if (action.payload) {\n        state.countryData.push(action.payload);\n      }\n    }).addCase(fetchCountrylists.pending, (state, action) => {\n      if (state.religionStatus === 'idle') {\n        state.religionStatus = 'pending';\n        state.religionError = '';\n      }\n    }).addCase(fetchCountrylists.rejected, (state, action) => {\n      const {\n        requestId\n      } = action.meta;\n      if (state.religionStatus === 'pending' && state.religionStatus === requestId) {\n        state.religionStatus = 'idle';\n        state.religionError = 'Unable to get list';\n      }\n    }).addCase(fetchStatelists.fulfilled, (state, action) => {\n      state.religionStatus = \"succeeded\";\n      state.religionError = '';\n      if (action.payload) {\n        state.stateList.push(action.payload);\n      }\n    }).addCase(fetchStatelists.pending, (state, action) => {\n      if (state.religionStatus === 'idle') {\n        state.religionStatus = 'pending';\n        state.religionError = '';\n      }\n    }).addCase(fetchStatelists.rejected, (state, action) => {\n      const {\n        requestId\n      } = action.meta;\n      if (state.religionStatus === 'pending' && state.religionStatus === requestId) {\n        state.religionStatus = 'idle';\n        state.religionError = 'Unable to get list';\n      }\n    }).addCase(fetchCitylists.fulfilled, (state, action) => {\n      state.religionStatus = \"succeeded\";\n      state.religionError = '';\n      if (action.payload) {\n        state.cityList.push(action.payload);\n      }\n    }).addCase(fetchCitylists.pending, (state, action) => {\n      if (state.religionStatus === 'idle') {\n        state.religionStatus = 'pending';\n        state.religionError = '';\n      }\n    }).addCase(fetchCitylists.rejected, (state, action) => {\n      const {\n        requestId\n      } = action.meta;\n      if (state.religionStatus === 'pending' && state.religionStatus === requestId) {\n        state.religionStatus = 'idle';\n        state.religionError = 'Unable to get list';\n      }\n    });\n  }\n});\nexport const {} = locationSlice.actions;\nexport const getLocation = state => state.locationData;\nexport const getCountry = state => state.countryData;\nexport const getStateList = state => state.stateList;\nexport const getCityList = state => state.cityList;\nexport default locationSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","LocationService","initialState","religionStatus","religionError","locationData","createLocation","countryData","createCountryData","stateList","createStateList","cityList","createCityList","country","state","city","citizenship","visaStatus","visaExpiryMonth","visaExpiryYear","id","name","hasNextLevel","nextLevelName","fetchCountrylists","_res$data","res","getCountries","data","values","undefined","fetchStatelists","countryName","_res$data2","getStates","fetchCitylists","location","_res$data3","getCities","locationSlice","reducers","resetQuery","extraReducers","builder","addCase","fulfilled","action","payload","push","pending","rejected","requestId","meta","actions","getLocation","getCountry","getStateList","getCityList","reducer"],"sources":["/Users/vinusha/Desktop/Vinusha/test/Swayamvaram-web/src/redux/slices/location.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice, PayloadAction } from \"@reduxjs/toolkit\"\nimport CasteService, { CasteInfoDto, ReligionDataDto } from '../../services/CasteService'\nimport LocationService, { LocationDataDto, LocationInfoDto } from '../../services/LocationService';\n\nexport const initialState={\n    religionStatus:'idle',\n    religionError:'',\n    locationData:createLocation(),\n    countryData:createCountryData(),\n    stateList:createStateList(),\n    cityList:createCityList()\n}\nexport function createLocation(): LocationInfoDto{\n    return{\n    country:'',\n    state:'',\n    city:'',\n    citizenship:'',\n    visaStatus:'',\n    visaExpiryMonth:0,\n    visaExpiryYear:0,\n    };\n\n}\nexport function createStateList(): [LocationDataDto]{\n  return[\n    {\n      id:'',\n      name:'',\n      hasNextLevel:'',\n      nextLevelName:''\n  }\n  ]\n\n}\nexport function createCityList(): [LocationDataDto]{\n  return[\n    {\n      id:'',\n      name:'',\n      hasNextLevel:'',\n      nextLevelName:''\n  }\n  ]\n\n}\nexport function createCountryData(): [LocationDataDto]{\n  return[\n    {\n      id:'',\n      name:'',\n      hasNextLevel:'',\n      nextLevelName:''\n    },\n  ]\n\n}\n\nexport const fetchCountrylists=createAsyncThunk(\n  '/matrimony/getlocation',\n  async () =>{\n    const res= await LocationService.getCountries();\n    return res? res?.data?.values :undefined\n  }\n);\nexport const fetchStatelists=createAsyncThunk(\n  '/matrimony/state/',\n  async (countryName:string) =>{\n    const res= await LocationService.getStates(countryName);\n    return res? res?.data?.values :undefined\n  }\n);\nexport const fetchCitylists=createAsyncThunk(\n  '/matrimony/city/',\n  async (location:LocationInfoDto) =>{\n    const res= await LocationService.getCities(location.country,location.state);\n    return res? res?.data?.values :undefined\n  }\n);\nexport const locationSlice = createSlice({\n    name: \"Caste\",\n    initialState,\n    reducers: {\n      resetQuery:()=>{\n        return initialState\n      },\n    },\n    extraReducers: (builder) => {\n      builder.addCase(fetchCountrylists.fulfilled, (state, action) => {\n        // Add user to the state array\n        state.religionStatus=\"succeeded\"\n        state.religionError=''\n        if(action.payload){\n        state.countryData.push(action.payload)\n        }\n      })\n      .addCase(fetchCountrylists.pending, (state, action) => {\n        if (state.religionStatus === 'idle') {\n          state.religionStatus = 'pending'\n          state.religionError='';\n        }\n      })\n      .addCase(fetchCountrylists.rejected, (state, action) => {\n        const { requestId } = action.meta      \n        if (\n          state.religionStatus === 'pending' &&\n          state.religionStatus === requestId\n        ) {\n          state.religionStatus = 'idle'\n          state.religionError = 'Unable to get list'\n        }\n      })\n      .addCase(fetchStatelists.fulfilled, (state, action) => {\n        state.religionStatus=\"succeeded\"\n        state.religionError=''\n        if(action.payload){\n        state.stateList.push(action.payload)\n        }\n      })\n      .addCase(fetchStatelists.pending, (state, action) => {\n        if (state.religionStatus === 'idle') {\n          state.religionStatus = 'pending'\n          state.religionError='';\n        }\n      })\n      .addCase(fetchStatelists.rejected, (state, action) => {\n        const { requestId } = action.meta      \n        if (\n          state.religionStatus === 'pending' &&\n          state.religionStatus === requestId\n        ) {\n          state.religionStatus = 'idle'\n          state.religionError = 'Unable to get list'\n        \n        }\n      })\n      .addCase(fetchCitylists.fulfilled, (state, action) => {\n        state.religionStatus=\"succeeded\"\n        state.religionError=''\n        if(action.payload){\n        state.cityList.push(action.payload)\n        }\n      })\n      .addCase(fetchCitylists.pending, (state, action) => {\n        if (state.religionStatus === 'idle') {\n          state.religionStatus = 'pending'\n          state.religionError='';\n        }\n      })\n      .addCase(fetchCitylists.rejected, (state, action) => {\n        const { requestId } = action.meta      \n        if (\n          state.religionStatus === 'pending' &&\n          state.religionStatus === requestId\n        ) {\n          state.religionStatus = 'idle'\n          state.religionError = 'Unable to get list'\n        \n        }\n      })\n    }\n  \n  })\n  \n  export const { } = locationSlice.actions\n  export  const getLocation=(state:any)=>state.locationData;\n  export  const getCountry=(state:any)=>state.countryData;\n  export  const getStateList=(state:any)=>state.stateList;\n  export  const getCityList=(state:any)=>state.cityList;\n  export default locationSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}