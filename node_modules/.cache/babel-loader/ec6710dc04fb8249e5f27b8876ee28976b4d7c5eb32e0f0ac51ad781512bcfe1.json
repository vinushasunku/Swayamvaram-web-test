{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport * as rp from 'redux-persist';\n// import AsyncStorage from '@react-native-async-storage/async-storage'\n\nimport storage from 'redux-persist/lib/storage';\nimport loginReducer from './slices/login';\nimport appDataReducer from '../redux/slices/appData';\nimport casteReducer from './slices/caste';\nimport registrationReducer from './slices/registration';\nimport locationReducer from './slices/location';\nimport personalReducer from './slices/personal';\nimport educationReducer from './slices/education';\nimport familyReducer from './slices/family';\nimport matcheReducer from './slices/matches';\nimport hardSet from 'redux-persist/lib/stateReconciler/hardSet';\nconst reducers = combineReducers({\n  loginId: loginReducer,\n  appData: appDataReducer,\n  religion: casteReducer,\n  registration: registrationReducer,\n  location: locationReducer,\n  personal: personalReducer,\n  education: educationReducer,\n  family: familyReducer,\n  matches: matcheReducer\n});\nconst persistConfig = {\n  key: 'root',\n  storage,\n  //stateReconciler: hardSet,\n  //whitelist:['flags'],\n  stateReconciles: hardSet\n  // whitelist: ['navigation'],\n};\n\nconst rootReducer = (state, action) => {\n  return reducers(state, action);\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\nconst store = configureStore({\n  reducer: persistedReducer,\n  devTools: process.env.NODE_ENV !== 'production',\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [rp.FLUSH, rp.REHYDRATE, rp.PAUSE, rp.PERSIST, rp.PURGE, rp.REGISTER]\n    }\n  })\n});\nexport default store;","map":{"version":3,"names":["configureStore","combineReducers","persistReducer","rp","storage","loginReducer","appDataReducer","casteReducer","registrationReducer","locationReducer","personalReducer","educationReducer","familyReducer","matcheReducer","hardSet","reducers","loginId","appData","religion","registration","location","personal","education","family","matches","persistConfig","key","stateReconciles","rootReducer","state","action","persistedReducer","store","reducer","devTools","process","env","NODE_ENV","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER"],"sources":["/Users/vinusha/Desktop/Vinusha/test/Swayamvaram-web/src/redux/store.tsx"],"sourcesContent":["import {configureStore, Reducer} from '@reduxjs/toolkit'\nimport {combineReducers,applyMiddleware} from 'redux'\nimport {persistReducer,persistStore} from 'redux-persist'\nimport * as rp from 'redux-persist'\n// import AsyncStorage from '@react-native-async-storage/async-storage'\nimport thunk from 'redux-thunk'\nimport storage from 'redux-persist/lib/storage';\nimport loginReducer from './slices/login';\nimport appDataReducer from '../redux/slices/appData'\n import casteReducer from './slices/caste'\n import registrationReducer from './slices/registration'\nimport locationReducer from './slices/location'\nimport personalReducer from './slices/personal'\nimport educationReducer from './slices/education'\nimport familyReducer from './slices/family'\nimport matcheReducer from './slices/matches'\nimport hardSet from 'redux-persist/lib/stateReconciler/hardSet'\n\nconst reducers=combineReducers({\n    loginId: loginReducer,\n    appData:appDataReducer,\n    religion:casteReducer,\n    registration:registrationReducer,\n    location:locationReducer,\n    personal:personalReducer,\n    education:educationReducer,\n    family:familyReducer,\n    matches:matcheReducer\n\n})\nconst persistConfig={\n    key:'root',\n    storage,\n    //stateReconciler: hardSet,\n    //whitelist:['flags'],\n    stateReconciles: hardSet as (inboundState: CombinedState) => CombinedState,\n   // whitelist: ['navigation'],\n}\ntype CombinedState = typeof rootReducer extends Reducer<infer U, any> ? U : never\nconst rootReducer=(state:any,action:any)=>{\n    return reducers(state,action)\n};\nconst persistedReducer=persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  devTools: process.env.NODE_ENV !== 'production',\n  middleware: (getDefaultMiddleware) =>\n  getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [rp.FLUSH, rp.REHYDRATE, rp.PAUSE, rp.PERSIST, rp.PURGE, rp.REGISTER],\n    },\n  }),\n});\n\nexport type RootState=ReturnType<typeof store.getState>;\nexport type AppDispatch=typeof store.dispatch;\nexport default store;"],"mappings":"AAAA,SAAQA,cAAc,QAAgB,kBAAkB;AACxD,SAAQC,eAAe,QAAuB,OAAO;AACrD,SAAQC,cAAc,QAAoB,eAAe;AACzD,OAAO,KAAKC,EAAE,MAAM,eAAe;AACnC;;AAEA,OAAOC,OAAO,MAAM,2BAA2B;AAC/C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,cAAc,MAAM,yBAAyB;AACnD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,mBAAmB,MAAM,uBAAuB;AACxD,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,OAAOC,OAAO,MAAM,2CAA2C;AAE/D,MAAMC,QAAQ,GAACd,eAAe,CAAC;EAC3Be,OAAO,EAAEX,YAAY;EACrBY,OAAO,EAACX,cAAc;EACtBY,QAAQ,EAACX,YAAY;EACrBY,YAAY,EAACX,mBAAmB;EAChCY,QAAQ,EAACX,eAAe;EACxBY,QAAQ,EAACX,eAAe;EACxBY,SAAS,EAACX,gBAAgB;EAC1BY,MAAM,EAACX,aAAa;EACpBY,OAAO,EAACX;AAEZ,CAAC,CAAC;AACF,MAAMY,aAAa,GAAC;EAChBC,GAAG,EAAC,MAAM;EACVtB,OAAO;EACP;EACA;EACAuB,eAAe,EAAEb;EAClB;AACH,CAAC;;AAED,MAAMc,WAAW,GAACA,CAACC,KAAS,EAACC,MAAU,KAAG;EACtC,OAAOf,QAAQ,CAACc,KAAK,EAACC,MAAM,CAAC;AACjC,CAAC;AACD,MAAMC,gBAAgB,GAAC7B,cAAc,CAACuB,aAAa,EAAEG,WAAW,CAAC;AAEjE,MAAMI,KAAK,GAAGhC,cAAc,CAAC;EAC3BiC,OAAO,EAAEF,gBAAgB;EACzBG,QAAQ,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY;EAC/CC,UAAU,EAAGC,oBAAoB,IACjCA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjBC,cAAc,EAAE,CAACtC,EAAE,CAACuC,KAAK,EAAEvC,EAAE,CAACwC,SAAS,EAAExC,EAAE,CAACyC,KAAK,EAAEzC,EAAE,CAAC0C,OAAO,EAAE1C,EAAE,CAAC2C,KAAK,EAAE3C,EAAE,CAAC4C,QAAQ;IACtF;EACF,CAAC;AACH,CAAC,CAAC;AAIF,eAAef,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}